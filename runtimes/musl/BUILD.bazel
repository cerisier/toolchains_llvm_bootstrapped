load("@aspect_bazel_lib//lib:copy_file.bzl", "copy_file")
load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@toolchains_llvm_bootstrapped//toolchain/stage2:cc_stage2_library.bzl", "cc_stage2_library")
load("@toolchains_llvm_bootstrapped//toolchain/stage2:cc_stage2_static_library.bzl", "cc_stage2_static_library")
load("//toolchain:selects.bzl", "platform_llvm_binary")
load(":libc_musl_srcs_filegroup.bzl", "libc_musl_srcs_filegroup")

libc_musl_srcs_filegroup(
    name = "musl_arch_compile_srcs",
    srcs = ["@musl_libc//:compile_srcs"],
    arch = select({
        "@toolchains_llvm_bootstrapped//platforms/config:linux_x86_64": "x86_64",
        "@toolchains_llvm_bootstrapped//platforms/config:linux_aarch64": "aarch64",
    }, no_match_error = "Unsupported platform"),
    visibility = ["//visibility:public"],
)

CFLAGS_C99FSE = [
    "-std=c99",
    "-nostdinc",
    "-ffreestanding",
    "-fexcess-precision=standard",
    "-frounding-math",
    "-fno-strict-aliasing",
    "-Wa,--noexecstack",
]

CFLAGS_AUTO = [
    # "-O2", # auto
    "-fno-align-functions",
    # "-pipe",
] + select({
    "@toolchains_llvm_bootstrapped//config:stage2_optimization_mode_optimized": [
        "-fomit-frame-pointer",
    ],
    "//conditions:default": [],
}) + [
    "-fno-unwind-tables",
    "-fno-asynchronous-unwind-tables",
    # "-ffunction-sections", # default
    # "-fdata-sections", # default
    "-w",
    "-Qunused-arguments",
]

CFLAGS_ALL = CFLAGS_C99FSE + [
    "-D_XOPEN_SOURCE=700",
] + CFLAGS_AUTO


CFLAGS_NOSSP = [
    "-fno-stack-protector",
]

cc_stage2_library(
    name = "musl_libc",
    copts = CFLAGS_ALL + ["-nostdlib"],
    srcs = [
        ":musl_arch_compile_srcs",
        "@musl_libc//:compile_hdrs",
    ],
    # passing all files as textual_hdrs since arch specific .c can #include
    # their generic .c counterpart.
    textual_hdrs = ["@musl_libc//:compile_srcs"],
    implementation_deps = [
        "@musl_libc//:musl_internal_headers",
        "@musl_libc//:musl_libc_headers",
    ],
    visibility = ["//visibility:public"],
)

cc_stage2_static_library(
    name = "musl_libc.static",
    deps = [":musl_libc"],
    visibility = ["//visibility:public"],
)

cc_stage2_library(
    name = "musl_crt1",
    srcs = ["@musl_libc//:crt/crt1.c"],
    copts = CFLAGS_ALL + ["-DCRT"] + CFLAGS_NOSSP,
    implementation_deps = [
        "@musl_libc//:musl_internal_headers",
        "@musl_libc//:musl_libc_headers",
    ],
    visibility = ["//visibility:public"],
)

cc_stage2_static_library(
    name = "musl_crt1.static",
    deps = [":musl_crt1"],
    visibility = ["//visibility:public"],
)

cc_stage2_library(
    name = "musl_rcrt1",
    srcs = ["@musl_libc//:crt/rcrt1.c"],
    copts = CFLAGS_ALL + ["-DCRT"] + CFLAGS_NOSSP + ["-fPIC"],
    implementation_deps = [
        "@musl_libc//:musl_internal_headers",
        "@musl_libc//:musl_libc_headers",
    ],
    visibility = ["//visibility:public"],
)

cc_stage2_static_library(
    name = "musl_rcrt1.static",
    deps = [":musl_rcrt1"],
    visibility = ["//visibility:public"],
)

cc_stage2_library(
    name = "musl_Scrt1",
    srcs = ["@musl_libc//:crt/Scrt1.c"],
    copts = CFLAGS_ALL + ["-DCRT"] + CFLAGS_NOSSP + ["-fPIC"],
    textual_hdrs = [
        "@musl_libc//:crt/crt1.c",
    ],
    implementation_deps = [
        "@musl_libc//:musl_internal_headers",
        "@musl_libc//:musl_libc_headers",
    ],
    visibility = ["//visibility:public"],
)

cc_stage2_static_library(
    name = "musl_Scrt1.static",
    deps = [":musl_Scrt1"],
    visibility = ["//visibility:public"],
)

copy_file(
    name = "musl_libc.a",
    src = ":musl_libc.static",
    out = "libc.a",
    allow_symlink = True,
)

MUSL_LIBS = [
    "m",
    "rt",
    "pthread",
    "util",
    "resolv",
    "dl",
    "crypt",
    "xnet",
]

alias(
    name = "llvm_ar",
    actual = platform_llvm_binary("bin/llvm-ar"),
)

# Generate empty static libraries for all other companion libraries.
# That's what musl does.
[
    genrule(
        name = "musl_lib{}".format(lib),
        srcs = [],
        outs = ["lib{}.a".format(lib)],
        tools = [":llvm_ar"],
        cmd = "$(location :llvm_ar) rc $@",
        visibility = ["//visibility:public"],
    ) for lib in MUSL_LIBS
]

copy_to_directory(
    name = "musl_library_search_directory",
    srcs = [
        ":musl_libc.a",
    ] + [
        ":musl_lib{}".format(lib) for lib in MUSL_LIBS
    ],
    visibility = ["//visibility:public"],
)

alias(
    name = "musl_headers_include_search_directory",
    actual = "@musl_libc//:musl_libc_headers_include_directory",
    visibility = ["//visibility:public"],
)
