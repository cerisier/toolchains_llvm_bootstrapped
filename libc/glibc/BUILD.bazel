load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@bazel_skylib//rules:select_file.bzl", "select_file")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("//toolchain:selects.bzl", "platform_extra_binary")
load(":glibc_linker_script.bzl", "make_glibc_linker_script")
load(":glibc_stubs_assembly_files.bzl", "glibc_stubs_assembly_files")
load(":glibc_shared_library.bzl", "make_glibc_shared_library")
load(":libc_aware_target_triple.bzl", "libc_aware_target_triple")

# Generate all support libraries unconditionally.
#
# The stubs generator creates empty .s files for libraries not provided by the
# target glibc version, which is simpler than selecting which libraries to
# generate based on that target glibc version.
LIBC_SO_VERSIONS = {
    "ld": "2",
    "c": "6",
    "dl": "2",
    "m": "6",
    "pthread": "0",
    "resolv": "2",
    "rt": "1",
    "util": "1",
}

alias(
    name = "glibc-stubs-generator",
    actual = platform_extra_binary("bin/glibc-stubs-generator"),
)

# Generate assembly files for the glibc (one per lib)
glibc_stubs_assembly_files(
    name = "generate_glibc_stubs",
    target = libc_aware_target_triple(),
    abilist = "abilists",
    visibility = ["//visibility:public"],
)

# Make one target per lib assembly file
[
    select_file(
        name = "lib" + lib + ".s",
        srcs = ":generate_glibc_stubs",
        subpath = "glibc/build/" + lib + ".s",
        visibility = ["//visibility:public"],
    ) for lib in LIBC_SO_VERSIONS.keys()
]

select_file(
    name = "all.map",
    srcs = ":generate_glibc_stubs",
    subpath = "glibc/build/all.map",
    visibility = ["//visibility:public"],
)

# __stack_chk_guard is a global symbol that is provided and initialized by the
# dynamic linker (ld.so) when using glibc.
#
# Because we let clang frontend provide the -dynamic-linker flag, it means that
# the linker will never be able to link against the actual target dynamic linker,
# only set the proper path as the dynamic linker.
#
# Because of this, references to __stack_chk_guard would end up as undefined
# symbol. Here we add a stub in the libc because we know that the
# dynamic linker will be the one to provide it.
write_file(
    name = "__stack_chk_guard.S",
    out = "glibc/build/__stack_chk_guard.S",
    content = [
        ".globl __stack_chk_guard",
        ".type __stack_chk_guard, %object;",
        # TODO: Support 32 bit architectures,
        #      Infer this from the target.
        "#if __SIZEOF_POINTER__ == 4",
        ".size __stack_chk_guard, 4",
        "#else",
        ".size __stack_chk_guard, 8",
        "#endif",
        # Will be relocated at runtime by the dynamic linker itself.
        "__stack_chk_guard:",
    ],
)

# Make one cc_shared_library target per lib, using the assembly file
LIBS = [
    make_glibc_shared_library(
        name = "lib%s_shared_library" % lib,
        lib_name = lib,
        lib_version = version,
        srcs = [":lib" + lib + ".s"],
    ) for (lib, version) in LIBC_SO_VERSIONS.items() if lib != "c"
] + [
    make_glibc_shared_library(
        name = "libc_shared_library",
        lib_name = "c",
        lib_version = "6",
        srcs = [
            ":libc.s",
            ":__stack_chk_guard.S"
        ],
        extra_link_flags = [
            # _IO_stdin_used is defined as a global symbol in .rodata
            # and needs to be relocated at runtime with values from the CRTs.
            "-z",
            "notext",
        ],
    ),
]

# The below creates linker scripts with the names that the linker wants
# (libc.so, libdl.so) which redirect to libc.so.6, libdl.so.2, etc.
LINKER_SCRIPTS = [
    make_glibc_linker_script(
        name = "lib%s_linker_script" % lib,
        lib_name = lib,
        lib_version = version,
    ) for (lib, version) in LIBC_SO_VERSIONS.items()
]

copy_to_directory(
    name = "search_directory",
    srcs = LIBS + LINKER_SCRIPTS,
    visibility = ["//visibility:public"],
)
