load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:common_settings.bzl", "bool_setting")
load("@rules_cc//cc/toolchains:toolchain.bzl", "cc_toolchain")
load("@rules_cc//cc/toolchains/impl:documented_api.bzl", "cc_args_list")
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")
load(":declare_toolchains.bzl", "declare_toolchains")

bool_setting(
    name = "bootstrap_setting",
    build_setting_default = False,
)

config_setting(
    name = "bootstrapped",
    flag_values = {
        ":bootstrap_setting": "0",
    },
    visibility = ["//visibility:public"],
)

config_setting(
    name = "bootstrapping",
    flag_values = {
        ":bootstrap_setting": "1",
    },
    visibility = ["//visibility:public"],
)

cc_args_list(
    name = "default_link_flags",
    args = select({
        "@platforms//os:macos": [
            "//toolchain/args/macos:macos_default_link_flags",
        ],
        "//conditions:default": [],
    }, no_match_error = "Unsupported platform for default_link_flags"),
)

cc_args_list(
    name = "default_libs",
    args = selects.with_or({
        "@platforms//os:macos": [
            "//toolchain/args/macos:macos_default_libs",
        ],
        "@platforms//os:linux": [
            "//toolchain/args/linux:crt1",
            "//toolchain/args/linux:crtbegin",
            "//toolchain/args/linux:linux_default_libs",
        ],
        "//conditions:default": [],
    }, no_match_error = "Unsupported platform for default_libs"),
)

cc_args_list(
    name = "macos_toolchain_args",
    args = [
        "//toolchain/args/macos:macos_sdk_sysroot",
        "//toolchain/args/macos:macos_minimum_os_flags",
    ],
)

cc_args_list(
    name = "linux_toolchain_args",
    args = [
        "//toolchain/args/linux:hermetic_linux_args",
        "//toolchain/args:libcxx_headers_include_search_paths",
    ] + select({
        "//platforms/config/libc_aware:musl": [
            "//toolchain/args/linux:kernel_headers_include_search_paths",
            "//toolchain/args/linux:musl_libc_headers_include_search_paths",
        ],
        "//platforms/config/libc_aware:gnu": [
            "//toolchain/args/linux:kernel_headers_include_search_paths",
            "//toolchain/args/linux:glibc_headers_include_search_paths",
        ],
        #TODO: Remove once we have set the default glibc for a given target
        "//constraints/libc:unconstrained": [
            "//toolchain/args/linux:kernel_headers_include_search_paths",
            "//toolchain/args/linux:glibc_headers_include_search_paths",
        ],
        "//conditions:default": [],
    }) + select({
        "//platforms/config/libc_aware:musl": [
            #TODO: Handle musl dynamic linking
            # musl implies static linking for now
            "//toolchain/args:static_link_executable",
        ],
        "//conditions:default": [],
    }),
)

cc_args(
    name = "verbose",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        # "-v",
    ],
)

cc_args_list(
    name = "platform_specific_args",
    args = select({
        # Platform specific flags.
        "@platforms//os:macos": [":macos_toolchain_args"],
        "@platforms//os:linux": [":linux_toolchain_args"],
        "//conditions:default": [],
    }, no_match_error = "Unsupported platform for xclang"),
)

cc_args_list(
    name = "toolchain_args",
    args = [
        # Common default compile flags.
        "//toolchain/args:llvm_target_for_platform",
        "//toolchain/args:no_absolute_paths_for_builtins",
        "//toolchain/args:deterministic_compile_flags",
        # ":verbose",

        ":platform_specific_args",

        # Common default link flags.
        "//toolchain/args:use_lld",
        ":default_link_flags",
        ":default_libs",
    ],
)

cc_toolchain(
    name = "cc_toolchain",
    args = [":toolchain_args"],
    known_features = [
        "@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features",
        "//toolchain/features:all_non_legacy_builtin_features",
        "//toolchain/features/legacy:all_legacy_builtin_features",
    ] + select({
        # Should be last. This is a workaround to add those args last.
        # See comment of this target.
        "@platforms//os:linux": [
            "//toolchain/args/linux:crtend_feature",
        ],
        "//conditions:default": [],
    }),
    enabled_features = [
        "@rules_cc//cc/toolchains/args:experimental_replace_legacy_action_config_features",
        # Do not enable this manually. Those features are enabled internally by --compilation_mode flags family.
        "//toolchain/features/legacy:all_legacy_builtin_features",
    ] + select({
        # Should be last. This is a workaround to add those args last.
        # See comment of this target.
        "@platforms//os:linux": [
            "//toolchain/args/linux:crtend_feature",
        ],
        "//conditions:default": [],
    }),
    tool_map = "//toolchain/llvm:all_tools",
    compiler = "clang",
)

declare_toolchains()
