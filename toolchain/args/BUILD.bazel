load("@rules_cc//cc/toolchains:args.bzl", "cc_args")

package(default_visibility = ["//visibility:public"])

# COMMON RESET FLAGS
# --no-default-config
# -fno-spell-checking

    # if (target.cpu.arch.isArm()) {
    #     try argv.append(if (target.cpu.arch.isThumb()) "-mthumb" else "-mno-thumb");
    # }

# -mcpu for arm assembly 


cc_args(
    name = "llvm_target_for_platform",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-target",
    ] + select({
        #TODO: Generate this automatically
        "//platforms/config/libc_aware:linux_x86_64": ["x86_64-linux-gnu"],
        "//platforms/config/libc_aware:linux_aarch64": ["aarch64-linux-gnu"],
        "//platforms/config/libc_aware:linux_x86_64_gnu": ["x86_64-linux-gnu"],
        "//platforms/config/libc_aware:linux_aarch64_gnu": ["aarch64-linux-gnu"],
        "//platforms/config/libc_aware:linux_x86_64_musl": ["x86_64-linux-musl"],
        "//platforms/config/libc_aware:linux_aarch64_musl": ["aarch64-linux-musl"],
        "//platforms/config:macos_aarch64": ["aarch64-apple-darwin"],
    }, no_match_error = "Unsupported platform"),
)

cc_args(
    name = "libcxx_headers_include_search_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_compile_actions",
    ],
    args = [
        "-isystem",
        "{libcxx_headers_include_search_path}",
        "-isystem",
        "{libcxxabi_headers_include_search_path}",
    ],
    format = {
        "libcxx_headers_include_search_path": "//runtimes/libcxx:libcxx_headers_include_search_directory",
        "libcxxabi_headers_include_search_path": "//runtimes/libcxx:libcxxabi_headers_include_search_directory",
    },
    data = [
        "//runtimes/libcxx:libcxx_headers_include_search_directory",
        "//runtimes/libcxx:libcxxabi_headers_include_search_directory",
    ],
)

cc_args(
    name = "static_link_executable",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_link_executable",
    ],
    args = [
        "-static",
    ],
)

cc_args(
    name = "use_lld",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-fuse-ld=lld",
        # lld will be used if it's next to clang.
        # It would have been great to set the path explicitly.
        # "--ld-path={lld_path}",
    ] + select({
        "@platforms//os:macos": [],
        #TODO: Put those at the right place, they are applied too early
        "//conditions:default": [
            "-Wl,-no-as-needed",
            "-Wl,-z,relro,-z,now",
        ],
    }),
)

cc_args(
    name = "no_absolute_paths_for_builtins",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        # If the compiler sometimes rewrites paths in the .d files without symlinks
        # (ie when they're shorter), it confuses Bazel's logic for verifying all
        # #included header files are listed as inputs to the action.
        "-no-canonical-prefixes",
    ],
)

cc_args(
    name = "deterministic_compile_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        # Make C++ compilation deterministic. Use linkstamping instead of these
        # compiler symbols.
        "-Wno-builtin-macro-redefined",
        "-D__DATE__=\"redacted\"",
        "-D__TIMESTAMP__=\"redacted\"",
        "-D__TIME__=\"redacted\"",
    ],
)
