
load("@rules_cc//cc/toolchains:args.bzl", "cc_args")
load("@rules_cc//cc/toolchains:feature.bzl", "cc_feature")
load("@rules_cc//cc/toolchains/impl:documented_api.bzl", "cc_args_list")

package(default_visibility = ["//visibility:public"])

# Passing a sysroot to /dev/null has the side effect of removing all default
# library search paths.
cc_args(
    name = "linux_no_sysroot",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "--sysroot=/dev/null",
    ],
)

cc_args(
    name = "hermetic_compile_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:cpp_compile_actions",
        "@rules_cc//cc/toolchains/actions:c_compile_actions",
        # -nostdlibinc triggers a warning for assemble (no preprocess)
        "@rules_cc//cc/toolchains/actions:preprocess_assemble",
        "@rules_cc//cc/toolchains/actions:objc_compile",
        "@rules_cc//cc/toolchains/actions:objcpp_compile",
    ],
    args = [
        # We want to disable everything except builtin headers since they are
        # provided as part of the compiler toolchain repository.
        "-nostdlibinc",
    ],
)

cc_args(
    name = "hermetic_link_flags",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-nostdlib",
    ],
)

config_setting(
    name = "empty_sysroot",
    flag_values = {
        "//config:empty_sysroot": "True",
    },
)

cc_args_list(
    name = "hermetic_linux_args",
    args = select({
        ":empty_sysroot": [
            ":linux_no_sysroot",
        ],
        "//conditions:default": [],
    }) + [
        ":hermetic_compile_flags",
        ":hermetic_link_flags",
    ],
)

cc_args(
    name = "kernel_headers_include_search_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-isystem",
        "{kernel_headers_include_search_path}",
    ],
    format = {
        "kernel_headers_include_search_path": "@kernel_headers//:kernel_headers_directory",
    },
    data = [
        "@kernel_headers//:kernel_headers_directory",
    ],
)

cc_args(
    name = "glibc_headers_include_search_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        # "__GLIBC_MINOR__={d}", version.minor
        "-isystem",
        "{libc_headers_include_search_path}",
    ],
    format = {
        "libc_headers_include_search_path": "//runtimes/glibc:glibc_headers_include_search_directory",
    },
    data = [
        "//runtimes/glibc:glibc_headers_include_search_directory",
    ],
)

cc_args(
    name = "crt1_gnu",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_executable_actions",
    ],
    args = [
        "-L.", # needed to -l:bazel-out/...
        "-Wl,--whole-archive",
        "{Scrt1.a}",
        "-Wl,--no-whole-archive",
    ],
    data = [
        "//runtimes/glibc:glibc_Scrt1.static",
    ],
    format = {
        "Scrt1.a": "//runtimes/glibc:glibc_Scrt1.static",
    },
)

cc_args(
    name = "linux_default_libs_gnu",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        # We need to support copts like -lc -ldl etc...
        "-L{libcxx_library_search_path}",
        "-L{libc_library_search_path}",
        "-L{libunwind_library_search_path}",
        "-L.", # needed to -l:bazel-out/...

        "{clang_rt.builtins.a}",

        # In prevention of when all of those can be shared libraries.
        "-Wl,--push-state",
        "-Wl,--as-needed",
        "-lc++",
        "-lc++abi",

        # In newer versions of glibc various libs such as libm, librt are
        # normally included in libc and not available as separate libraries.
        #
        # But in the way we handle generating libc stubs, we chose to generate
        # empty libs for those that have been removed so that we do not have to
        # handle varying inclusions.
        "-lm",
        "-lpthread",

        "-lc",
        # In real life, libc_nonshared is added the libc.so linker script right 
        # after the libc.so.6 library.
        "{libc_nonshared.a}",

        "-ldl",
        "-lrt",
        "-lutil",

        "-lunwind", # only if libcxx on linux
        "-Wl,--pop-state",
    ],
    data = [
        "//runtimes/compiler-rt:clang_rt.builtins.static",
        "//runtimes/libcxx:libcxx_library_search_directory",
        "//runtimes/glibc:glibc_libc_nonshared.static",
        "//runtimes/glibc:glibc_library_search_directory",
        "//runtimes/libunwind:libunwind_library_search_directory",
    ],
    format = {
        "clang_rt.builtins.a": "//runtimes/compiler-rt:clang_rt.builtins.static",
        "libcxx_library_search_path": "//runtimes/libcxx:libcxx_library_search_directory",
        "libc_nonshared.a": "//runtimes/glibc:glibc_libc_nonshared.static",
        "libc_library_search_path": "//runtimes/glibc:glibc_library_search_directory",
        "libunwind_library_search_path": "//runtimes/libunwind:libunwind_library_search_directory",
    },
)


###

cc_args(
    name = "musl_libc_headers_include_search_paths",
    actions = [
        "@rules_cc//cc/toolchains/actions:compile_actions",
    ],
    args = [
        "-isystem",
        "{libc_headers_include_search_path}",
    ],
    format = {
        "libc_headers_include_search_path": "//runtimes/musl:musl_headers_include_search_directory",
    },
    data = [
        "//runtimes/musl:musl_headers_include_search_directory",
    ],
)

cc_args(
    name = "crt1_musl",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_executable_actions",
    ],
    args = [
        "-L.", # needed to -l:bazel-out/...
        "-Wl,--whole-archive",
        "{Scrt1.a}",
        "-Wl,--no-whole-archive",
    ],
    data = [
        "//runtimes/musl:musl_Scrt1.static",
    ],
    format = {
        "Scrt1.a": "//runtimes/musl:musl_Scrt1.static",
    },
)

#TODO: Factorize this and gnu
cc_args(
    name = "linux_default_libs_musl",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        # We need to support copts like -lc -ldl etc...
        "-L{libcxx_library_search_path}",
        "-L{libc_library_search_path}",
        "-L{libunwind_library_search_path}",
        "-L.", # needed to -l:bazel-out/...

        "{clang_rt.builtins.a}",

        # In prevention of when all of those can be shared libraries.
        "-Wl,--push-state",
        "-Wl,--as-needed",

        "-lc++",
        "-lc++abi",

        # In newer versions of musl_libc various libs such as libm, librt are
        # normally included in libc and not available as separate libraries.
        #
        # But in the way we handle generating libc stubs, we chose to generate
        # empty libs for those that have been removed so that we do not have to
        # handle varying inclusions.
        "-lm",
        "-lpthread",
        "-lc",
        "-ldl",
        "-lrt",
        "-lutil",

        "-lunwind", # only if libcxx on linux
        "-Wl,--pop-state",
    ],
    data = [
        "//runtimes/compiler-rt:clang_rt.builtins.static",
        "//runtimes/libcxx:libcxx_library_search_directory",
        "//runtimes/musl:musl_library_search_directory",
        "//runtimes/libunwind:libunwind_library_search_directory",
    ],
    format = {
        "clang_rt.builtins.a": "//runtimes/compiler-rt:clang_rt.builtins.static",
        "libcxx_library_search_path": "//runtimes/libcxx:libcxx_library_search_directory",
        "libc_library_search_path": "//runtimes/musl:musl_library_search_directory",
        "libunwind_library_search_path": "//runtimes/libunwind:libunwind_library_search_directory",
    },
)

alias(
    name = "crt1",
    actual = select({
        "//constraints/libc:musl": ":crt1_musl",
        "//platforms/config/libc_aware:gnu": ":crt1_gnu",
        #TODO: Remove once we have set the default glibc for a given target
        "//constraints/libc:unconstrained": ":crt1_gnu",
    })
)

cc_args(
    name = "crtbegin",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-Wl,--whole-archive",
        "{crtbegin}",
        "-Wl,--no-whole-archive",
    ],
    format = {
        "crtbegin": "//runtimes/compiler-rt:clang_rt.crtbegin",
    },
    data = [
        "//runtimes/compiler-rt:clang_rt.crtbegin",
    ],
)

#FIXME: Remove this
# crtbegin and crtend must wrap all libraries_to_link but for now, we can't
# use libraries_to_link as args because of legacy features not yet ported to args.
#
# As soon as it is the case, we can remove this cc_feature and use libraries_to_link
# as args in the cc_toolchain args attributes, wrapped between crtbegin and crtend.
cc_feature(
    name = "crtend_feature",
    feature_name = "crtend",
    args = [
        "//toolchain/args/linux:crtend",
    ],
    visibility = ["//visibility:public"],
)

cc_args(
    name = "crtend",
    actions = [
        "@rules_cc//cc/toolchains/actions:link_actions",
    ],
    args = [
        "-Wl,--whole-archive",
        "{crtend}",
        "-Wl,--no-whole-archive",
    ],
    format = {
        "crtend": "//runtimes/compiler-rt:clang_rt.crtend",
    },
    data = [
        "//runtimes/compiler-rt:clang_rt.crtend",
    ],
)

alias(
    name = "linux_default_libs",
    actual = select({
        "//constraints/libc:musl": ":linux_default_libs_musl",
        "//platforms/config/libc_aware:gnu": ":linux_default_libs_gnu",
        #TODO: Remove once we have set the default glibc for a given target
        "//constraints/libc:unconstrained": ":linux_default_libs_gnu",
    }),
)
