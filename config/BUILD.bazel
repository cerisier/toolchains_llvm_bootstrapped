load("@bazel_skylib//rules:common_settings.bzl", "bool_flag", "string_flag")

OPTIMIZATION_MODES = [
    "debug",
    "optimized",
]

alias(
    name = "use_libtool_on_macos",
    actual = "@rules_cc//cc/toolchains/args/archiver_flags:use_libtool_on_macos",
)

# This flag controls the optimization mode for the compilation of the target
# prequisites like the standard C library, the C++ standard library,
# the unwinder, etc.
#
# Setting this to "debug" will compile these libraries with debug symbols,
# frame pointers where applicable, and no optimizations.
string_flag(
    name = "stage2_optimization_mode",
    values = OPTIMIZATION_MODES,
    build_setting_default = "optimized",
    visibility = ["//visibility:public"],
)

[ 
    config_setting(
        name = "stage2_optimization_mode_{}".format(optimization_mode),
        flag_values = {
            ":stage2_optimization_mode": optimization_mode,
        },
        visibility = ["//visibility:public"],
    ) for optimization_mode in OPTIMIZATION_MODES
]

# This flag controls whether we compile and link with --sysroot=/dev/null
# to ensure hermeticity.
#
# This is useful if dependencies that you do not control link against host system
# libraries and you want to allow this behavior. (Hello rust_std).
bool_flag(
    name = "empty_sysroot",
    build_setting_default = True,
    visibility = ["//visibility:public"],
)

# This flag makes a dummy gcc_s library to link against.
#
# libgcc_s is a shared library (only libgcc_s.so exists) that is required
# when creating or linking against a shared library that uses c++ exceptions
# that may cross the library boundary.
#
# This toolchain currently doesn't support linking dynamically against an
# unwinder, which means that this toolchain doesn't support cross boundary
# c++ exceptions for the moment (and the only unwinder supported is libunwind).
# Yet, it is possible for dependencies that you do not control to pass -lgcc_s
# linker flags.
#
# If you know what you are doing and want to no-op these flags, this option
# will make a stub libgcc_s to satistfy the linker, but will still link libunwind
# statically.
#
# In theory, such option should only be available if this toolchain had support
# for a dynamically linked unwinder.
bool_flag(
    name = "experimental_stub_libgcc_s",
    build_setting_default = False,
    visibility = ["//visibility:public"],
)
